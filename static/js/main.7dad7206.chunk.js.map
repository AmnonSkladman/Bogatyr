{"version":3,"sources":["components/Book.jsx","components/Header.jsx","components/Search.jsx","components/App.jsx","utils/styles.js","utils/api.js","serviceWorker.js","index.js"],"names":["Book","_ref","_ref$book","book","id","_ref$book$volumeInfo","volumeInfo","authors","publishedDate","title","cover","classes","author","length","concat","react_default","a","createElement","Grid_default","item","xs","md","lg","xl","className","alt","src","Header","text","Search","search","_useState","useState","_useState2","Object","slicedToArray","query","setQuery","aria-labelledby","onChange","e","target","value","placeholder","required","type","aria-label","onClick","preventDefault","role","initialState","loading","books","errorMessage","reducer","state","action","objectSpread","payload","error","withStyles","theme","root","flexGrow","paper","height","width","control","padding","spacing","unit","_useReducer","useReducer","_useReducer2","dispatch","useEffect","fetch","then","response","json","jsonResponse","_state$books$items","items","console","log","components_Header","components_Search","q","data","body","status","alignItems","container","direction","justify","map","index","components_Book","key","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2NAgCeA,EA7BF,SAAAC,GAMP,IAAAC,EAAAD,EALJE,KACEC,EAIEF,EAJFE,GAIEC,EAAAH,EAHFI,WAAcC,EAGZF,EAHYE,QAASC,EAGrBH,EAHqBG,cAAeC,EAGpCJ,EAHoCI,MAIlCC,GADFT,EADJU,QAGE,4CACAP,EACA,oDAEIQ,EAASL,EACXA,EAAQM,OAAS,EAAjB,GAAAC,OACKP,EAAQ,GADb,aAEEA,EAAQ,GACV,OAEJ,OACEQ,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACnCR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIO,UAAU,aAAaf,GAC3BM,EAAAC,EAAAC,cAAA,OAAKQ,IAAG,GAAAX,OAAKL,EAAL,gBAAAK,OAAyBF,GAAUc,IAAKhB,IAChDK,EAAAC,EAAAC,cAAA,SAAIT,MChBGmB,EARA,SAAA1B,GAAc,IAAX2B,EAAW3B,EAAX2B,KAChB,OACEb,EAAAC,EAAAC,cAAA,UAAQO,UAAU,cAChBT,EAAAC,EAAAC,cAAA,UAAKW,GACLb,EAAAC,EAAAC,cAAA,KAAGO,UAAU,aAAb,uCCiCSK,EArCA,SAAA5B,GAAgB,IAAb6B,EAAa7B,EAAb6B,OAAaC,EACHC,mBAAS,IADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBK,EADsBH,EAAA,GACfI,EADeJ,EAAA,GAiB7B,OACElB,EAAAC,EAAAC,cAAA,QAAMO,UAAU,UACdT,EAAAC,EAAAC,cAAA,SACEqB,kBAAgB,wBAChBd,UAAU,eACVe,SAnBoB,SAAAC,GACxBH,EAASG,EAAEC,OAAOC,QAmBdC,YAAY,sBACZC,UAAQ,EACRC,KAAK,SACLH,MAAON,IAETrB,EAAAC,EAAAC,cAAA,UAAQ6B,aAAW,SAAStB,UAAU,gBAAgBuB,QAjBtC,SAAAP,GAClBA,EAAEQ,iBACFlB,EAAOM,GALPC,EAAS,KAoBqEQ,KAAK,UAC/E9B,EAAAC,EAAAC,cAAA,QAAM6B,aAAW,yBAAyBG,KAAK,OAA/C,mBCtBFC,EAAe,CACnBC,SAAS,EACTC,MAAO,GACPC,aAAc,MAGVC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOX,MACb,IAAK,uBACH,OAAOX,OAAAuB,EAAA,EAAAvB,CAAA,GACFqB,EADL,CAEEJ,SAAS,EACTE,aAAc,OAElB,IAAK,uBACH,OAAOnB,OAAAuB,EAAA,EAAAvB,CAAA,GACFqB,EADL,CAEEJ,SAAS,EACTC,MAAOI,EAAOE,UAElB,IAAK,uBACH,OAAOxB,OAAAuB,EAAA,EAAAvB,CAAA,GACFqB,EADL,CAEEJ,SAAS,EACTE,aAAcG,EAAOG,QAEzB,QACE,OAAOJ,IA8EEK,uBClHO,SAAAC,GAAK,MAAK,CAC9BC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,OAAQ,IACRC,MAAO,KAETC,QAAS,CACPC,QAA8B,EAArBP,EAAMQ,QAAQC,QDyGZV,CA1EH,SAAA3D,GAAiB,IAAdU,EAAcV,EAAdU,QAAc4D,EACDC,qBAAWlB,EAASJ,GADnBuB,EAAAvC,OAAAC,EAAA,EAAAD,CAAAqC,EAAA,GACpBhB,EADoBkB,EAAA,GACbC,EADaD,EAAA,GAG3BE,oBAAU,WACRC,ME5CwB,oDF6CrBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJN,EAAS,CACP7B,KAAM,uBACNa,QAASsB,OAGd,IAEH,IAd2BC,EA4C6B1B,EAAhDH,MAAS8B,aA5CU,IAAAD,EA4CF,GA5CEA,EA4CG5B,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAI5C,OAFAgC,QAAQC,IAAI7B,GAGVxC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACoE,EAAD,CAAQzD,KAAK,YACbb,EAAAC,EAAAC,cAACqE,EAAD,CAAQxD,OArCG,SAAAyD,GACbb,EAAS,CACP7B,KAAM,yBAGR+B,MAAK,iDAAA9D,OAAkDyE,IACpDV,KAAK,SAAAC,GAAQ,OACZA,EACGC,OACAF,KAAK,SAAAW,GAAI,MAAK,CACbC,KAAMD,EACN7B,MAAOmB,EAASnB,MAChB+B,OAAQZ,EAASY,YAGtBb,KAAK,SAAAG,GACwB,MAAxBA,EAAaU,OACfhB,EAAS,CACP7B,KAAM,uBACNa,QAASsB,EAAaS,OAGxBf,EAAS,CACP7B,KAAM,uBACNc,MAAOqB,EAAarB,aAc1B5C,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACE2E,WAAW,aACXnE,UAAWb,EAAQmD,KACnB8B,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRzB,QAAS,IAERlB,IAAYE,EACXtC,EAAAC,EAAAC,cAAA,2BACEoC,EACFtC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,gBAAgB6B,GAE/B6B,EAAMa,IAAI,SAAC5F,EAAM6F,GAAP,OACRjF,EAAAC,EAAAC,cAACgF,EAAD,CAAMC,IAAG,GAAApF,OAAKkF,EAAL,KAAAlF,OAAcX,EAAKG,WAAWG,OAASN,KAAMA,wBG9F9CgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.7dad7206.chunk.js","sourcesContent":["import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst Book = ({\r\n  book: {\r\n    id,\r\n    volumeInfo: { authors, publishedDate, title }\r\n  },\r\n  classes\r\n}) => {\r\n  const cover =\r\n    'http://books.google.com/books/content?id=' +\r\n    id +\r\n    '&printsec=frontcover&img=1&zoom=1&source=gbs_api';\r\n\r\n  const author = authors\r\n    ? authors.length > 1\r\n      ? `${authors[0]} and more`\r\n      : authors[0]\r\n    : 'None';\r\n\r\n  return (\r\n    <Grid item xs={12} md={6} lg={3} xl={2}>\r\n      <div>\r\n        <h2 className=\"bookTitle\">{title}</h2>\r\n        <img alt={`${title} written by ${author}`} src={cover} />\r\n        <p>{publishedDate}</p>\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Book;\r\n","import React from 'react';\r\n\r\nconst Header = ({ text }) => {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h2>{text}</h2>\r\n      <p className=\"App-intro\">A digital knight-errant for books</p>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React, { useState } from 'react';\r\n\r\nconst Search = ({ search }) => {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleChangeQuery = e => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  const resetQuery = () => {\r\n    setQuery('');\r\n  };\r\n\r\n  const searchBooks = e => {\r\n    e.preventDefault();\r\n    search(query);\r\n    resetQuery();\r\n  };\r\n\r\n  return (\r\n    <form className=\"search\">\r\n      <input\r\n        aria-labelledby='Search for books here'\r\n        className=\"search-field\"\r\n        onChange={handleChangeQuery}\r\n        placeholder=\"Search for books...\"\r\n        required\r\n        type=\"search\"\r\n        value={query}\r\n      />\r\n      <button aria-label='Search' className=\"button-search\" onClick={searchBooks} type=\"submit\">\r\n        <span aria-label=\"Magnifying glass emoji\" role=\"img\">\r\n          üîç\r\n        </span>\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useReducer, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Book from './Book';\r\nimport { BOOK_API_URL } from '../utils/api';\r\nimport Header from './Header';\r\nimport Search from './Search';\r\nimport { styles } from '../utils/styles';\r\n\r\nconst initialState = {\r\n  loading: true,\r\n  books: [],\r\n  errorMessage: null\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SEARCH_BOOKS_REQUEST':\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        errorMessage: null\r\n      };\r\n    case 'SEARCH_BOOKS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        books: action.payload\r\n      };\r\n    case 'SEARCH_BOOKS_FAILURE':\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        errorMessage: action.error\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst App = ({ classes }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  useEffect(() => {\r\n    fetch(BOOK_API_URL)\r\n      .then(response => response.json())\r\n      .then(jsonResponse => {\r\n        dispatch({\r\n          type: 'SEARCH_BOOKS_SUCCESS',\r\n          payload: jsonResponse\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const search = q => {\r\n    dispatch({\r\n      type: 'SEARCH_BOOKS_REQUEST'\r\n    });\r\n\r\n    fetch(`https://www.googleapis.com/books/v1/volumes?q=${q}`)\r\n      .then(response =>\r\n        response\r\n          .json()\r\n          .then(data => ({\r\n            body: data,\r\n            error: response.error,\r\n            status: response.status\r\n          }))\r\n      )\r\n      .then(jsonResponse => {\r\n        if (jsonResponse.status === 200) {\r\n          dispatch({\r\n            type: 'SEARCH_BOOKS_SUCCESS',\r\n            payload: jsonResponse.body\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: 'SEARCH_BOOKS_FAILURE',\r\n            error: jsonResponse.error\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  const { books: { items = []}, errorMessage, loading } = state;\r\n\r\n  console.log(state);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header text=\"Bogatyr\" />\r\n      <Search search={search} />\r\n      <Grid\r\n        alignItems=\"flex-start\"\r\n        className={classes.root}\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        spacing={16}\r\n      >\r\n        {loading && !errorMessage ? (\r\n          <span>Loading... </span>\r\n        ) : errorMessage ? (\r\n          <div className=\"errorMessage\">{errorMessage}</div>\r\n        ) : (\r\n          items.map((book, index) => (\r\n            <Book key={`${index}-${book.volumeInfo.title}`} book={book} />\r\n          ))\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(App);\r\n","export const styles = theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100\r\n  },\r\n  control: {\r\n    padding: theme.spacing.unit * 2\r\n  }\r\n});\r\n","export const BOOK_API_URL = \"https://www.googleapis.com/books/v1/volumes?q=''\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport './styles/Normalize.css';\r\nimport './styles/App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}